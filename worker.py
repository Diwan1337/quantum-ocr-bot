import asyncio
import os
import re
import cv2
import pytesseract
import gspread

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv
from gspread.exceptions import WorksheetNotFound, SpreadsheetNotFound

# –ò–º–ø–æ—Ä—Ç–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ state.py
from state import pending_external_screenshot

# ‚îÄ‚îÄ‚îÄ 1. –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
load_dotenv()
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID") or ""
if not SPREADSHEET_ID:
    raise RuntimeError("‚ùå SPREADSHEET_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

# ‚îÄ‚îÄ‚îÄ 2. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
gc = gspread.service_account(
    filename="google_key.json",
    scopes=[
        "https://www.googleapis.com/auth/spreadsheets",
        "https://www.googleapis.com/auth/drive",
    ],
)
try:
    ss = gc.open_by_key(SPREADSHEET_ID)
except SpreadsheetNotFound:
    raise RuntimeError("‚ùå –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

# ‚îÄ‚îÄ‚îÄ 3. –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –±–∞–ª–ª–æ–≤ (EGE) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
try:
    sheet = ss.worksheet("EGE")
except WorksheetNotFound:
    sheet = ss.add_worksheet("EGE", rows=200, cols=30)
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤—Ä—É—á–Ω—É—é.

# ‚îÄ‚îÄ‚îÄ 4. –õ–∏—Å—Ç —Å –æ—Ç–∑—ã–≤–∞–º–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
try:
    feedback_sheet = ss.worksheet("Feedback")
except WorksheetNotFound:
    feedback_sheet = ss.add_worksheet("Feedback", rows=100, cols=3)
    feedback_sheet.append_row(["tg_id", "feedback_type", "content"])

# ‚îÄ‚îÄ‚îÄ 5. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Tesseract (–¥–ª—è Windows) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
TESS_PATH = r"C:\Program Files\Tesseract-OCR\tesseract.exe"
if os.path.exists(TESS_PATH):
    pytesseract.pytesseract.tesseract_cmd = TESS_PATH

# ‚îÄ‚îÄ‚îÄ 6. –†–µ–≥—É–ª—è—Ä–∫–∞ –∏ —Å–ª–æ–≤–∞—Ä—å –ø—Ä–µ–¥–º–µ—Ç–æ–≤ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
PAIR_RE = re.compile(r"([–ê-–Ø–Å–∞-—è—ë() ]+)[\s\n]+(\d{1,3})")
ALIASES = {
    "–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –ø—Ä–æ—Ñ–∏–ª—å–Ω–∞—è": "math",
    "–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –ø—Ä–æ—Ñ–∏–ª—å":    "math",
    "—Ñ–∏–∑–∏–∫–∞":                "phys",
    "—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫":          "rus",
    "–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞":           "inf",
    "–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ –∫–µ–≥—ç":      "inf",
    "–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ (–∫–µ–≥—ç)":    "inf",
}


def extract_scores(path: str) -> dict[str, int]:
    """–û—Ü–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É, –∏–∑–≤–ª–µ–∫–∞–µ—Ç –ø–∞—Ä—ã ¬´–ø—Ä–µ–¥–º–µ—Ç ‚Äî –±–∞–ª–ª¬ª."""
    img = cv2.imread(path)

    # 1) upscale √ó3
    img = cv2.resize(img, None, fx=3, fy=3, interpolation=cv2.INTER_CUBIC)

    # 2) CLAHE –∫–æ–Ω—Ç—Ä–∞—Å—Ç
    lab = cv2.cvtColor(img, cv2.COLOR_BGR2LAB)
    l, a, b = cv2.split(lab)
    clahe = cv2.createCLAHE(clipLimit=3.0, tileGridSize=(8, 8))
    cl = clahe.apply(l)
    img = cv2.merge((cl, a, b))

    # 3) –≤ —Å–µ—Ä—ã–π + Otsu threshold
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    _, thr = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)

    # 4) OCR (oem 3 = LSTM, psm 6 = –±–ª–æ–∫ —Ç–µ–∫—Å—Ç–∞)
    cfg = "--oem 3 --psm 6"
    text = pytesseract.image_to_string(thr, lang="rus", config="--oem 3 --psm 6")
    print("RAW OCR:\n", text)

    result: dict[str, int] = {}
    for subj_raw, val in PAIR_RE.findall(text):
        subj = re.sub(r"[()]", "", subj_raw).strip().lower()
        for alias, code in ALIASES.items():
            if alias in subj:
                result[code] = int(val)
                break
    return result


def matches_sheet(tg_id: int, scores: dict[str, int], student_id: str) -> bool:
    """
    –°–≤–µ—Ä—è–µ—Ç/–¥–æ–ø–∏—Å—ã–≤–∞–µ—Ç –±–∞–ª–ª—ã –≤ —Ç–∞–±–ª–∏—Ü—É EGE:
    - –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç ‚Äî –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É.
    - –ò–Ω–∞—á–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–ª–∏—á–∞—é—â–∏–µ—Å—è –±–∞–ª–ª—ã.
    –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True (—Å—á–∏—Ç–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–π).
    """
    header = sheet.row_values(1)
    # –ù–∞–π–¥—ë–º –∏–Ω–¥–µ–∫—Å –∫–æ–ª–æ–Ω–∫–∏ student_id (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 2)
    try:
        idx_sid = header.index("student_id")  # 0-based
    except ValueError:
        idx_sid = None

    cell = sheet.find(str(tg_id))
    if cell is None:
        new_row = [""] * len(header)
        new_row[0] = str(tg_id)
        if idx_sid is not None:
            new_row[idx_sid] = student_id
        for subj, val in scores.items():
            if subj in header:
                new_row[header.index(subj)] = str(val)
        sheet.append_row(new_row)
        return True

    # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —Å—Ç—Ä–æ–∫–∞ ‚Äî –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–∏—à–µ–º student_id –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–ª—ã
    row_idx = cell.row
    if idx_sid is not None:
        existing = sheet.cell(row_idx, idx_sid + 1).value  # +1, –ø–æ—Ç–æ–º—É —á—Ç–æ API 1-based
        if not existing:
            sheet.update_cell(row_idx, idx_sid + 1, student_id)

    for subj, val in scores.items():
        if subj in header:
            col = header.index(subj) + 1
            sheet.update_cell(row_idx, col, str(val))
    return True


async def run_worker(bot, q: asyncio.Queue):
    while True:
        task = await q.get()
        tg_id      = task["tg_id"]
        student_id = task.get("student_id", "")

        try:
            # 1) OCR
            scores = extract_scores(task["file"])
            await bot.send_message(tg_id, f"üîç –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {scores}")

            # 2) –ó–∞–ø–∏—Å—å –±–∞–ª–ª–æ–≤
            ok = matches_sheet(tg_id, scores, student_id)
            result_msg = "‚úÖ –ë–∞–ª–ª—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã!" if ok else "‚ö†Ô∏è –ù–µ —Å–æ–≤–ø–∞–ª–æ, –∫—É—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –≤—Ä—É—á–Ω—É—é."
            await bot.send_message(tg_id, result_msg)

            if ok:
                # —Å—Ä–∞–∑—É –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±–∞–ª–ª—ã" –∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–∑—ã–≤"
                kb = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±–∞–ª–ª—ã", callback_data="edit_scores")],
                    [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–∑—ã–≤", callback_data="edit_review")],
                ])
                await bot.send_message(tg_id, "–ï—Å–ª–∏ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –ø–æ–º–µ–Ω—è—Ç—å, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=kb)

            # 3) –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –æ—Ç–∑—ã–≤—É –Ω–∞ –≤–Ω–µ—à–Ω–∏—Ö –ø–ª–æ—â–∞–¥–∫–∞—Ö
            if ok:
                fcell = feedback_sheet.find(str(tg_id))
                if fcell is None:
                    await bot.send_message(
                        tg_id,
                        "üü¢–¢–ó –ö –û–¢–ó–´–í–ê–ú –ù–ê –í–ü (–≤–Ω–µ—à–Ω–∏–µ –ø–ª–æ—â–∞–¥–∫–∏) üü¢\n\n"
                        "–ü–æ—á–µ–º—É —Ç—ã –≤—ã–±—Ä–∞–ª–∞ ¬´99 –±–∞–ª–ª–æ–≤¬ª?\n"
                        "–ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ –æ–± —É—Ä–æ–∫–∞—Ö, –∫–æ–Ω—Å–ø–µ–∫—Ç–∞—Ö, –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏—è—Ö. –ú–æ–∂–µ—Ç, –∑–∞–ø–æ–º–Ω–∏–ª–∏—Å—å –∫–∞–∫–∏–µ-—Ç–æ –ª–∞–π—Ñ—Ö–∞–∫–∏ –∏–ª–∏ —á—Ç–æ-—Ç–æ –Ω–∞ —É—Ä–æ–∫–∞—Ö –æ–∫–∞–∑–∞–ª–æ—Å—å –¥–ª—è —Ç–µ–±—è –Ω–∞–∏–±–æ–ª–µ–µ —Ü–µ–Ω–Ω—ã–º –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º?\n"
                        "–†–∞—Å—Å–∫–∞–∂–∏, –≤ —á–µ–º —É–ª—É—á—à–∏–ª–∏—Å—å —Ç–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –≤–æ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è –≤ ¬´99 –±–∞–ª–ª–æ–≤¬ª –∏ –∫–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç—ã –ø–æ–ª—É—á–∏–ª–∞.\n"
                        "–ö–æ–º—É –±—ã —Ç—ã –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–ª–∞ –Ω–∞—à—É —à–∫–æ–ª—É –∏ –ø–æ—á–µ–º—É?\n\n"
                        "üëÜ –ï—Å–ª–∏ –æ—Å—Ç–∞–≤–∏—à—å –æ—Ç–∑—ã–≤ –Ω–∞ –í–ü, —Ç–æ –ø—Ä–∏—à–ª–∏ —Å–∫—Ä–∏–Ω\n\n"
                        "–û–∑—ã–≤—ã —Ç—ã –º–æ–∂–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –æ–¥–Ω–æ–π –∏–∑ —ç—Ç–∏—Ö –ø–ª–æ—â–∞–¥–æ–∫:\n"
                        "- –û–¢–ó–û–í–ò–ö (–≤ –ø–æ–∏—Å–∫–æ–≤–∏–∫–µ –Ω–∞–±–µ—Ä–∏ ¬´–æ—Ç–∑–æ–≤–∏–∫ 99 –±–∞–ª–ª–æ–≤¬ª)\n"
                        "- –Ø–Ω–¥–µ–∫—Å: https://yandex.ru/maps/org/99_ballov/59607351472/?ll=49.143410%2C55.787270&z=13.85\n"
                        "- –°—Ä–∞–≤–Ω–∏: https://www.sravni.ru/shkola/99-ballov/otzyvy/\n"
                        "- 2–ì–ò–°: https://2gis.ru/kazan/firm/70000001044938528\n\n"
                        "–û—Ç–∑—ã–≤ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–µ—Å—Ç–∞—Ö.\n\n"
                        "–ï—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å –æ—Å—Ç–∞–≤–ª—è—Ç—å –æ—Ç–∑—ã–≤, –æ—Ç–ø—Ä–∞–≤—å –ø—Ä–æ—Å—Ç–æ ¬´-¬ª.\n\n"
                        "üìπ –í–∏–¥–µ–æ-–æ—Ç–∑—ã–≤:\n"
                        "1. –î–µ—Ä–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ.\n"
                        "2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∑–≤—É–∫–∞ ‚Äî –±–µ–∑ –≥—Ä–æ–º–∫–∏—Ö —à—É–º–æ–≤.\n\n"
                        "–ß—Ç–æ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å:\n"
                        "- –í–∞—à–µ –∏–º—è;\n"
                        "- –ò–∑ –∫–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –≤—ã;\n"
                        "- –ù–∞ –∫–∞–∫–æ–º –ø—Ä–µ–¥–º–µ—Ç–µ(–∞—Ö) –∏ –≤ –∫–∞–∫–æ–º –≥–æ–¥—É –≤—ã –∑–∞–Ω–∏–º–∞–ª–∏—Å—å;\n"
                        "- –°–∫–æ–ª—å–∫–æ –±–∞–ª–ª–æ–≤ –≤—ã –Ω–∞–ø–∏—Å–∞–ª–∏ –Ω–∞ —ç–∫–∑–∞–º–µ–Ω–µ;\n"
                        "- –ü–æ—á–µ–º—É –≤—ã –≤—ã–±—Ä–∞–ª–∏ ¬´99 –±–∞–ª–ª–æ–≤¬ª;\n"
                        "- –í–∞—à–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –æ–± —É—Ä–æ–∫–∞—Ö, –∫–æ–Ω—Å–ø–µ–∫—Ç–∞—Ö –∏ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏—è—Ö;\n"
                        "- –ö–∞–∫–∏–µ –ª–∞–π—Ñ—Ö–∞–∫–∏ –≤—ã –≤—ã–Ω–µ—Å–ª–∏;\n"
                        "- –í —á—ë–º —É–ª—É—á—à–∏–ª–∏—Å—å –≤–∞—à–∏ –∑–Ω–∞–Ω–∏—è;\n"
                        "- –ö–æ–º—É –±—ã –≤—ã –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–ª–∏ –Ω–∞—à—É —à–∫–æ–ª—É –∏ –ø–æ—á–µ–º—É;\n"
                        "- –ù–µ–±–æ–ª—å—à–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ –∏ –Ω–∞–ø—É—Ç—Å—Ç–≤–∏–µ.\n"
                        "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å: @diwan1337",
                    )
                    # —Ç–µ–ø–µ—Ä—å –º—ã –∂–¥—ë–º –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–º–µ–Ω–Ω–æ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–ª–æ—â–∞–¥–∫–∏
                    await bot.send_message(tg_id,
                                           "üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –±–∞–ª–ª—ã! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –Ω–∞ –≤–Ω–µ—à–Ω–µ–π –ø–ª–æ—â–∞–¥–∫–µ‚Ä¶")
                    pending_external_screenshot.add(tg_id)
                else:
                    await bot.send_message(
                        tg_id,
                        "üôÇ –í–∞—à –æ—Ç–∑—ã–≤ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ß—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ –≤–∏–¥–µ–æ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–ª–æ—â–∞–¥–∫–∏."
                    )


        except Exception as exc:

            await bot.send_message(tg_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {exc}")


        finally:

            if os.path.exists(task["file"]):
                os.remove(task["file"])
